// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using XamarinAzureAD.RestServices.SipEntities;

namespace XamarinAzureAD.RestServices.SipEntities
{
    public static partial class DefaultExtensions
    {
        /// <param name='operations'>
        /// Reference to the XamarinAzureAD.RestServices.SipEntities.IDefault.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object Delete(this IDefault operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDefault)s).DeleteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamarinAzureAD.RestServices.SipEntities.IDefault.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteAsync(this IDefault operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamarinAzureAD.RestServices.SipEntities.IDefault.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static string Get(this IDefault operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDefault)s).GetAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamarinAzureAD.RestServices.SipEntities.IDefault.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetAsync(this IDefault operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamarinAzureAD.RestServices.SipEntities.IDefault.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        public static object Post(this IDefault operations, string value)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDefault)s).PostAsync(value);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamarinAzureAD.RestServices.SipEntities.IDefault.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PostAsync(this IDefault operations, string value, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PostWithOperationResponseAsync(value, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamarinAzureAD.RestServices.SipEntities.IDefault.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        public static object Put(this IDefault operations, int id, string value)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDefault)s).PutAsync(id, value);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamarinAzureAD.RestServices.SipEntities.IDefault.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='value'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutAsync(this IDefault operations, int id, string value, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutWithOperationResponseAsync(id, value, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
